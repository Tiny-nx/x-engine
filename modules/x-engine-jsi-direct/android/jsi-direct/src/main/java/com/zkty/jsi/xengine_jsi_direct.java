
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!

  package com.zkty.jsi;

  import java.util.List;
  import java.util.Map;
  import java.util.Set;
  import android.webkit.JavascriptInterface;
  import com.alibaba.fastjson.JSON;
  import com.alibaba.fastjson.JSONObject;
  import com.zkty.modules.nativ.jsi.bridge.CompletionHandler;
  import com.zkty.modules.nativ.jsi.JSIModule;
  import androidx.annotation.Nullable;

  
  class DirectPushDTO {
    public String scheme;

    @Optional
		public String host;

    public String pathname;

    public String fragment;

    @Optional
		public Map<String,String> query;

    @Optional
		public Map<String,String> params;
  }
  
  class DirectBackDTO {
    public String scheme;

    public String fragment;
  }
  
  interface xengine_jsi_direct_protocol {
    public void _push(DirectPushDTO dto, final CompletionHandler<Nullable> handler);
public void _back(DirectBackDTO dto, final CompletionHandler<Nullable> handler);
  }
  
  
  public abstract class xengine_jsi_direct extends JSIModule implements xengine_jsi_direct_protocol {
    @Override
    public String moduleId() {
      return "com.zkty.jsi.direct";
    }
  
    @JavascriptInterface
    final public void push(JSONObject obj, final CompletionHandler<Object> handler) {
      String defaultStr = "{  \"scheme\": \"omp\",  \"pathname\": \"/\",  \"params\": {    \"hideNavbar\": true  }}";
      obj = mergeDefault(obj, defaultStr);
      DirectPushDTO data= convert(obj,DirectPushDTO.class);
      _push(data, new CompletionHandler<Nullable>() {
        @Override
        public void complete(Nullable retValue) { handler.complete(null); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(Nullable value) { handler.setProgressData(null); }
      });

    }

    @JavascriptInterface
    final public void back(JSONObject obj, final CompletionHandler<Object> handler) {
      DirectBackDTO data= convert(obj,DirectBackDTO.class);
      _back(data, new CompletionHandler<Nullable>() {
        @Override
        public void complete(Nullable retValue) { handler.complete(null); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(Nullable value) { handler.setProgressData(null); }
      });

    }
  }
  

  