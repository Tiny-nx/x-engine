
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!


#import "xengine__module_lope.h"
#import <micros.h>


@implementation LopePIDDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   	return NO;
    }
@end
    
  
@implementation LopeScanDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   
   
   	return NO;
    }
@end
    
  
@implementation OpenDoorDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   	return NO;
    }
@end
    
  
@implementation LightLiftDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   
   	return NO;
    }
@end
    
  
@implementation LopeRetStatusDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   	return NO;
    }
@end
    






  @implementation xengine__module_lope
    - (instancetype)init
    {
        self = [super init];
        return self;
    }

    - (NSString *)moduleId{
        return @"com.zkty.module.lope";
    }
    
    - (void) initSdkAndConfigure:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          LopePIDDTO* dto = [self convert:dict clazz:LopePIDDTO.class];
          [self _initSdkAndConfigure:dto complete:^(LopeRetStatusDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) scanDevice:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          LopeScanDTO* dto = [self convert:dict clazz:LopeScanDTO.class];
          [self _scanDevice:dto complete:^(LopeRetStatusDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) openDoor:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          OpenDoorDTO* dto = [self convert:dict clazz:OpenDoorDTO.class];
          [self _openDoor:dto complete:^(LopeRetStatusDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) lightLift:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          LightLiftDTO* dto = [self convert:dict clazz:LightLiftDTO.class];
          [self _lightLift:dto complete:^(BOOL complete) {
             completionHandler(nil ,complete);
          }];
      }
  @end
