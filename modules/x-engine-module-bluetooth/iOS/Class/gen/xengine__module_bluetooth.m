
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!


#import "xengine__module_bluetooth.h"
#import <micros.h>


@implementation BuletoothEventDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {	return NO;
    }
@end
    
  
@implementation BuletoothContentDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {	return NO;
    }
@end
    
  
@implementation BuletoothDeviceDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   	return NO;
    }
@end
    
  
@implementation BtCharacteristicsDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   
   	return NO;
    }
@end
    
  
@implementation BtCharacteristicIdDTO
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
   	return NO;
    }
@end
    




  @implementation xengine__module_bluetooth
    - (instancetype)init
    {
        self = [super init];
        return self;
    }

    - (NSString *)moduleId{
        return @"com.zkty.module.bluetooth";
    }
    
    - (void) initBluetooth:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BuletoothEventDTO* dto = [self convert:dict clazz:BuletoothEventDTO.class];
          [self _initBluetooth:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) scanBluetoothDevice:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BuletoothEventDTO* dto = [self convert:dict clazz:BuletoothEventDTO.class];
          [self _scanBluetoothDevice:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) closeBluetoothDevice:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          [self _closeBluetoothDevice:^(BOOL complete) {
                 completionHandler(nil,complete); 
          }];
      }
    - (void) linkBluetoothDevice:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BuletoothDeviceDTO* dto = [self convert:dict clazz:BuletoothDeviceDTO.class];
          [self _linkBluetoothDevice:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) cancelLinkBluetoothDevice:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BuletoothDeviceDTO* dto = [self convert:dict clazz:BuletoothDeviceDTO.class];
          [self _cancelLinkBluetoothDevice:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) discoverServices:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BuletoothDeviceDTO* dto = [self convert:dict clazz:BuletoothDeviceDTO.class];
          [self _discoverServices:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) discoverCharacteristics:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BtCharacteristicsDTO* dto = [self convert:dict clazz:BtCharacteristicsDTO.class];
          [self _discoverCharacteristics:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) writeValueForCharacteristic:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BtCharacteristicIdDTO* dto = [self convert:dict clazz:BtCharacteristicIdDTO.class];
          [self _writeValueForCharacteristic:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
    - (void) readCharacteristic:(NSDictionary*) dict complete:(XEngineCallBack)completionHandler {

          BtCharacteristicIdDTO* dto = [self convert:dict clazz:BtCharacteristicIdDTO.class];
          [self _readCharacteristic:dto complete:^(BuletoothContentDTO* result,  BOOL complete) {
            completionHandler(result,complete);
          }];
        
      }
  @end
