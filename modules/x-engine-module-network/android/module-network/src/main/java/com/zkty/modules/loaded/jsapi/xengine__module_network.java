
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!

  package com.zkty.modules.loaded.jsapi;

  import java.util.List;
  import java.util.Map;
  import java.util.Set;
  import android.webkit.JavascriptInterface;
  import com.alibaba.fastjson.JSONObject;
  import com.zkty.modules.dsbridge.CompletionHandler;
  import com.zkty.modules.engine.annotation.Optional;
  import com.zkty.modules.engine.core.xengine__module_BaseModule;
  import androidx.annotation.Nullable;

  
  class RequestDTO {
    public String url;

    @Optional
		public String method;

    @Optional
		public Map<String,String> headers;

    @Optional
		public Map<String,String> params;
  }
  
  class ReponseDTO {
    public String data;

    public Integer status;

    public Map<String,String> headers;

    @Optional
		public RequestDTO request;
  }
  
  class DownloadRequestDTO {
    public String url;

    @Optional
		public String method;

    @Optional
		public Map<String,String> headers;

    @Optional
		public Map<String,String> params;

    @Optional
		public String __event__;

    public boolean isNeedBase64;
  }
  
  class DownloadReponseDTO {
    public String filePath;

    @Optional
		public String base64DataStr;

    public Integer status;

    public Map<String,String> headers;

    @Optional
		public DownloadRequestDTO request;
  }
  
  class UploadRequestDTO {
    public String url;

    @Optional
		public String method;

    @Optional
		public Map<String,String> headers;

    @Optional
		public Map<String,String> params;

    public String filename;

    @Optional
		public String filepath;

    @Optional
		public String fileBaseStr;

    @Optional
		public String __event__;
  }
  
  class UploadReponseDTO {
    public String data;

    public Integer status;

    public Map<String,String> headers;

    @Optional
		public UploadRequestDTO request;
  }
  
  interface xengine__module_network_i {
    public void _getRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _postRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _deleteRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _headRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _putRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _patchRequest(RequestDTO dto, final CompletionHandler<ReponseDTO> handler);
public void _downloadRequest(DownloadRequestDTO dto, final CompletionHandler<DownloadReponseDTO> handler);
public void _uploadRequest(UploadRequestDTO dto, final CompletionHandler<UploadReponseDTO> handler);
  }
  
  
  public abstract class xengine__module_network extends xengine__module_BaseModule implements xengine__module_network_i {
    @Override
    public String moduleId() {
      return "com.zkty.module.network";
    }
  
    @JavascriptInterface
    final public void getRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _getRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void postRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _postRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void deleteRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _deleteRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void headRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _headRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void putRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _putRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void patchRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      RequestDTO data= convert(obj,RequestDTO.class);
      _patchRequest(data, new CompletionHandler<ReponseDTO>() {
        @Override
        public void complete(ReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(ReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void downloadRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      DownloadRequestDTO data= convert(obj,DownloadRequestDTO.class);
      _downloadRequest(data, new CompletionHandler<DownloadReponseDTO>() {
        @Override
        public void complete(DownloadReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(DownloadReponseDTO value) { handler.setProgressData(value); }
      });

    }

    @JavascriptInterface
    final public void uploadRequest(JSONObject obj, final CompletionHandler<Object> handler) {
      UploadRequestDTO data= convert(obj,UploadRequestDTO.class);
      _uploadRequest(data, new CompletionHandler<UploadReponseDTO>() {
        @Override
        public void complete(UploadReponseDTO retValue) { handler.complete(retValue); }
        @Override
        public void complete() { handler.complete(); }
        @Override
        public void setProgressData(UploadReponseDTO value) { handler.setProgressData(value); }
      });

    }
  }
  

  